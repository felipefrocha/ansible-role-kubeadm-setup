---
# tasks file for kubeadm_setup

- name: Register user
  shell: id -u -n
  register: user

- name: Ensures swapoff
  command: swapoff -a
  become: true

- name: Pull initial images
  shell: kubeadm config images pull

  # if necessary use --pod-network-cidr for define CIDR block --pod-network-cidr={{ cidr_block }}
- name: Cluster initialize
  shell: "kubeadmin init --control-plane-endpoint={{ k8s.lb_endpont }} --cri-socket={{ k8s.cri_socket }} "
  register: kubeadmin_init
  until: kubeadmin_init.stdout.find("Your Kubernetes master has initialized successfully!") != -1
  retries: 1
  delay: 30

- name: Create .kube directory
  become_user: "{{ user.stdout }}"
  file:
    path: $HOME/.kube
    state: directory
    mode: 0755

- name: Check admin.conf file exists.
  stat:
    path: /etc/kubernetes/admin.conf
  register: k8s_conf

- name: Check config.yaml file exists.
  stat:
    path: /var/lib/kubelet/config.yaml
  register: kubelet_conf

- name: Copy admin.conf to {{ user.stdout }} kube config
  copy:
    src: /etc/kubernetes/admin.conf
    dest: "/home/{{ user.stdout }}/.kube/config"
    remote_src: yes
    owner: "{{ user.stdout }}"
  when: k8s_conf.stat.exists

- name: Cat config
  shell: cat /etc/kubernetes/admin.conf
  register: config

- name: Kubectl Config
  local_action: 
    module: copy 
    content: "{{ config.stdout }}"
    dest: ~/.kube/config

- name: Install Pod network
  become: yes
  become_user: " {{user.stdout }}"
  shell: kubectl apply -f "https://cloud.weave.works/k8s/net?k8s-version=$(kubectl version | base64 | tr -d '\n')" >> pod_network_setup.txt
  args:
    chdir: $HOME
    creates: pod_network_setup.txt
  

- name: Cluster token - get and store
  shell: kubeadm token list | cut -d ' ' -f1 | sed -n '2p'
  register: K8S_TOKEN

- name: CA Hash
  shell: openssl x509 -pubkey -in /etc/kubernetes/pki/ca.crt | openssl rsa -pubin -outform der 2>/dev/null | openssl dgst -sha256 -hex | sed 's/^.* //'
  register: K8S_MASTER_CA_HASH

- name: Add K8S Token and Hash to dummy host
  add_host:
    name:   "K8S_TOKEN_HOLDER"
    token:  "{{ K8S_TOKEN.stdout }}"
    hash:   "{{ K8S_MASTER_CA_HASH.stdout }}"

- name:
  debug:
    msg: "[Master] K8S_TOKEN_HOLDER K8S token is {{ hostvars['K8S_TOKEN_HOLDER']['token'] }}"

- name:
  debug:
    msg: "[Master] K8S_TOKEN_HOLDER K8S Hash is  {{ hostvars['K8S_TOKEN_HOLDER']['hash'] }}"