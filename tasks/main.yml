---
# tasks file for kubeadm_setup

- name: Register user
  shell: id -u -n
  register: user
  become: no

- name: Reboot host and wait for it to restart
  reboot:
    msg: "Reboot initiated by Ansible"
    connect_timeout: 5
    reboot_timeout: 600
    pre_reboot_delay: 0
    post_reboot_delay: 30
    test_command: whoami

- name: Ensures swapoff
  command: swapoff -a
  become: yes
  changed_when: False

- name: Ensures Systemctl
  command: sysctl --system
  become: yes
  changed_when: False

- name: Pull initial images
  shell: kubeadm config images pull
  changed_when: False
  
- block:
    - name: Check if cluster is created
      ansible.builtin.file:
        path: /etc/kubernetes/manifests/kube-apiserver.yaml
        state: file
  rescue:
    # if necessary use --pod-network-cidr for define CIDR block --pod-network-cidr={{ cidr_block }}
    - name: Cluster initialize
      shell: "kubeadm init --control-plane-endpoint={{ k8s.lb_endpont }} --cri-socket={{ k8s.cri_socket }} --upload-certs"
      register: kubeadmin_init
      delay: 600
    
    - name: Init Cluster
      debug:
        msg: "{{ kubeadmin_init.stdout }}"
  always:
    - name: Check admin.conf file exists.
      stat:
        path: /etc/kubernetes/admin.conf
      register: k8s_conf

    - name: Check config.yaml file exists.
      stat:
        path: /var/lib/kubelet/config.yaml
      register: kubelet_conf

- name: Create .kube directory
  file:
    path: ~/.kube
    state: directory
  become_user: "{{ user.stdout }}"
  
- name: Ensure .kube directory exists.
  file:
    path: /root/.kube
    state: directory

- name: Symlink the kubectl admin.conf to ~/.kube/conf.
  file:
    src: /etc/kubernetes/admin.conf
    dest: /root/.kube/config
    state: link

- name: Copy admin.conf to {{ user.stdout }} kube config
  copy:
    src: /etc/kubernetes/admin.conf
    dest: "/home/{{ user.stdout }}/.kube/config"
    remote_src: yes
    owner: "{{ user.stdout }}"
  when: k8s_conf.stat.exists

- name: Cat config
  shell: cat /etc/kubernetes/admin.conf
  register: config
  changed_when: False

- block:
  - name: Ensure directory Kubectl Config
    local_action:
      module: file
      path: $HOME/.kube
      state: directory
      mode: 0755
    become: no
  - name: Create Kubectl Config
    local_action: 
      module: copy 
      content: "{{ config.stdout }}"
      dest: ~/.kube/config
    become: no

- block:
    - name: Check if cluster is created
      shell: kubectl get po --all-namespaces | grep weave || exit 1
  rescue:
    - name: Kubectl version
      shell: kubectl version | base64 | tr -d '\n'
      register: kctl_version

    - name: Get Pod Networks Configuration
      get_url:
        url: "https://cloud.weave.works/k8s/net?k8s-version={{ kctl_version.stdout }}"
        dest: /tmp/weave.yml

    - name: Install Pod network
      shell: kubectl apply -f /tmp/weave.yml
      register: pod_network

- block: 
    - name: Certificate Key Access
      shell: kubeadm init phase upload-certs --upload-certs | tail -n 1
      register: K8S_MASTER_CERTIFICATE_KEY

    - name: Cluster token - get and store
      shell: kubeadm token list | grep default | cut -d ' ' -f1
      register: K8S_TOKEN

    - name: CA Hash
      shell: openssl x509 -pubkey -in /etc/kubernetes/pki/ca.crt | openssl rsa -pubin -outform der 2>/dev/null | openssl dgst -sha256 -hex | sed 's/^.* //'
      register: K8S_MASTER_CA_HASH

    - name: Add K8S Token and Hash to dummy host
      add_host:
        name:   "K8S_TOKEN_HOLDER"
        token:  "{{ K8S_TOKEN.stdout }}"
        hash:   "{{ K8S_MASTER_CA_HASH.stdout }}"
        certkey:  "{{ K8S_MASTER_CERTIFICATE_KEY.stdout }}"

  always:
    - name: Master Debug key
      debug:
        msg: "[Master] K8S_TOKEN_HOLDER K8S token is {{ hostvars['K8S_TOKEN_HOLDER']['token'] }}"

    - name: Master Debug token
      debug:
        msg: "[Master] K8S_TOKEN_HOLDER K8S Hash is  {{ hostvars['K8S_TOKEN_HOLDER']['hash'] }}"
    
    - name: Master Debug CK
      debug:
        msg: "[Master] K8S_TOKEN_HOLDER K8S Hash is  {{ hostvars['K8S_TOKEN_HOLDER']['certkey'] }}"


    - name: Wait cluster ready
      shell: (kubectl get no --output custom-columns=STATUS:.status.conditions[*].type | grep NotReady && false) || true
      retries: 5
      delay: 60
      register: result
      until: result.rc == 0
